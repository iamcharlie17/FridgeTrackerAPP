Directory structure:
└── iamcharlie17-fridgetrackerapp/
    ├── categories.csv
    ├── ingredients.csv
    ├── waste_log.csv
    └── App/
        ├── pom.xml
        ├── .gitignore
        ├── src/
        │   └── main/
        │       └── java/
        │           └── org/
        │               └── example/
        │                   ├── CategoryManager.java
        │                   ├── FridgeTrackerApp.java
        │                   ├── Ingrediant.java
        │                   ├── NutritionAPI.java
        │                   ├── RecipeAPIClient.java
        │                   ├── SeasonalTips.java
        │                   └── Welcome.java
        └── .idea/
            ├── encodings.xml
            ├── misc.xml
            └── .gitignore

================================================
FILE: categories.csv
================================================
Veg
Meat
Dairy
Vegetable
Test
test
Demo



================================================
FILE: ingredients.csv
================================================
Milk,Dairy,250,2025-07-01



================================================
FILE: waste_log.csv
================================================
Murgi,Meat,1000,2025-01-01
Demo1,Demo,100,2024-02-05
Demo2,Demo,1000,2024-03-09
Demo3,Demo,200,2024-03-12



================================================
FILE: App/pom.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>App</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.googlecode.lanterna</groupId>
            <artifactId>lanterna</artifactId>
            <version>3.1.1</version>
        </dependency>

        <dependency>
            <groupId>org.jline</groupId>
            <artifactId>jline</artifactId>
            <version>3.21.0</version>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.12.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version> 
        </dependency>

    </dependencies>

</project>



================================================
FILE: App/.gitignore
================================================
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### IntelliJ IDEA ###
.idea/modules.xml
.idea/jarRepositories.xml
.idea/compiler.xml
.idea/libraries/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store


================================================
FILE: App/src/main/java/org/example/CategoryManager.java
================================================
package org.example;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CategoryManager {
    private static final String CATEGORY_FILE = "categories.csv"; 


    public List<String> readCategoriesFromCSV() {
        List<String> categories = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(CATEGORY_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                categories.add(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading categories from file: " + e.getMessage());
        }
        return categories;
    }


    public void writeCategoryToCSV(String category) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(CATEGORY_FILE, true))) {
            writer.write(category);
            writer.newLine();
        } catch (IOException e) {
            System.out.println("Error writing to category file: " + e.getMessage());
        }
    }
}



================================================
FILE: App/src/main/java/org/example/FridgeTrackerApp.java
================================================
package org.example;

import java.util.List;
import java.util.Scanner;

public class FridgeTrackerApp {

    public static void main(String[] args) {
        Welcome w = new Welcome();
        w.printWelcome();

        Ingrediant ingrediant = new Ingrediant();
        RecipeAPIClient recipeAPIClient = new RecipeAPIClient();
        SeasonalTips seasonalTips = new SeasonalTips();
        NutritionAPI nutritionAPI = new NutritionAPI();  
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        printMenu();

        while (running) {
            System.out.print("Choose an option (or type 'menu' to see options): ");
            String input = scanner.nextLine();

            if (input.equalsIgnoreCase("menu")) {
                printMenu();
                continue;
            }

            int choice;
            try {
                choice = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
                continue;
            }

            switch (choice) {
                case 1 -> ingrediant.addIngredient(scanner);
                case 2 -> {
                    List<String> ingredientList = recipeAPIClient.getIngredientsFromCSV("ingredients.csv");
                    if (!ingredientList.isEmpty()) {
                        recipeAPIClient.suggestRecipes(ingredientList);
                    } else {
                        System.out.println("No ingredients found to suggest recipes.");
                    }
                }
                case 3 -> ingrediant.filterIngredientsByCategory(scanner);
                case 4 -> {
                    nutritionAPI.showNutritionalSummaryViaAPI();
                }
                case 5 -> ingrediant.removeExpiredIngredients();
                case 6 -> seasonalTips.displaySeasonalTips();
                case 7 -> ingrediant.updateIngredientQuantity(scanner);
                case 8 -> ingrediant.viewAllIngredients();
                case 9 -> ingrediant.showWasteLog();
                case 0 -> {
                    running = false;
                    System.out.println("Exiting... Goodbye!");
                }
                default -> System.out.println("Invalid option.");
            }
        }
    }

    private static void printMenu() {
        System.out.println("\n========== MENU ==========");
        System.out.println("1. Add Ingredient");
        System.out.println("2. Suggest Recipes");
        System.out.println("3. Filter Ingredients by Category");
        System.out.println("4. Nutrition Calculator");
        System.out.println("5. Remove Expired Items");
        System.out.println("6. Display Seasonal Health Tips");
        System.out.println("7. Update Ingredient Quantity");
        System.out.println("8. View All Ingredients");
        System.out.println("9. Show Waste Log");
        System.out.println("0. Exit");
        System.out.println("==========================\n");
    }
}



================================================
FILE: App/src/main/java/org/example/Ingrediant.java
================================================
package org.example;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Ingrediant {
    private static final String FILE_PATH = "ingredients.csv";
    private static final String WASTE_LOG_PATH = "waste_log.csv";
    private final CategoryManager categoryManager;

    public Ingrediant() {
        this.categoryManager = new CategoryManager();
    }

    public void addIngredient(Scanner scanner) {
        System.out.print("Enter ingredient name: ");
        String name = scanner.nextLine();

        List<String> categories = categoryManager.readCategoriesFromCSV();
        System.out.println("Select a category (or type 'new' to add a new category):");
        for (int i = 0; i < categories.size(); i++) {
            System.out.println((i + 1) + ". " + categories.get(i));
        }

        String categoryInput = scanner.nextLine();
        int categoryIndex = -1;

        if (categoryInput.equalsIgnoreCase("new")) {
            System.out.print("Enter new category name: ");
            String newCategory = scanner.nextLine();
            categories.add(newCategory);
            categoryManager.writeCategoryToCSV(newCategory);
            System.out.println("New category added: " + newCategory);
            categoryIndex = categories.size() - 1;
        } else {
            try {
                categoryIndex = Integer.parseInt(categoryInput) - 1;
                if (categoryIndex < 0 || categoryIndex >= categories.size()) {
                    System.out.println("Invalid category selection.");
                    return;
                }
                String selectedCategory = categories.get(categoryIndex);
                System.out.println("Selected category: " + selectedCategory);
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please select a valid category.");
                return;
            }
        }

        int quantity = 0;
        while (true) {
            System.out.print("Enter quantity (gm or ml): ");
            try {
                quantity = Integer.parseInt(scanner.nextLine());
                if (quantity < 1) {
                    System.out.println("Quantity must be a positive number.");
                } else {
                    break;
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid quantity. Please enter a valid number.");
            }
        }

        System.out.print("Enter expiration date (YYYY-MM-DD): ");
        String expirationDate = scanner.nextLine();

        String ingredientData = name + "," + categories.get(categoryIndex) + "," + quantity + "," + expirationDate + "\n";
        saveIngredientToFile(ingredientData);
    }

    public void viewAllIngredients() {
        System.out.println();
        System.out.println();
        System.out.println("                         List of All Ingredients                             ");
        System.out.println("------------------------------------------------------------------------------");
        List<String> ingredients = getAllIngredients();

        System.out.printf("| %-20s | %-20s | %-10s | %-15s |\n", "Ingredient", "Category", "Quantity", "Expiration Date");
        System.out.println("------------------------------------------------------------------------------");

        int size = ingredients.size();
        if (size > 0) {
            for (String ingredient : ingredients) {
                String[] details = ingredient.split(",");
                if (details.length == 4) {
                    System.out.printf("| %-20s | %-20s | %-10s | %-15s |\n", details[0], details[1], details[2], details[3]);
                }
            }
        } else {
            System.out.println("|                        ------ Empty ------                            |");
        }

        System.out.println("------------------------------------------------------------------------------");
        System.out.println();
        System.out.println();
    }

    public void removeExpiredIngredients() {
        List<String> updatedIngredients = new ArrayList<>();
        List<String> expiredIngredients = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;

            while ((line = reader.readLine()) != null) {
                String[] details = line.split(",");
                if (details.length == 4) {
                    String expiry = details[3];
                    try {
                        LocalDate expirationDate = LocalDate.parse(expiry);
                        if (expirationDate.isBefore(LocalDate.now())) {
                            expiredIngredients.add(line);
                        } else {
                            updatedIngredients.add(line);
                        }
                    } catch (Exception e) {
                        System.out.println("Invalid date format for: " + line);
                        updatedIngredients.add(line);
                    }
                }
            }

            try (FileWriter writer = new FileWriter(FILE_PATH, false)) {
                for (String ingredient : updatedIngredients) {
                    writer.write(ingredient + "\n");
                }
            }


            try (FileWriter wasteWriter = new FileWriter(WASTE_LOG_PATH, true)) {
                for (String waste : expiredIngredients) {
                    wasteWriter.write(waste + "\n");
                }
            }
            System.out.println();
            System.out.println();
            System.out.println("Expired ingredients removed and logged to waste.");
            System.out.println();
            System.out.println();

        } catch (IOException e) {
            System.out.println("Error removing expired ingredients: " + e.getMessage());
        }
    }

    public void showWasteLog() {
        System.out.println();
        System.out.println("                              Waste Log                                  ");
        System.out.println("----------------------------------------------------------------------------");
        System.out.printf("| %-20s | %-20s | %-10s | %-15s |\n", "Ingredient", "Category", "Quantity", "Expiration Date");
        System.out.println("----------------------------------------------------------------------------");

        try (BufferedReader reader = new BufferedReader(new FileReader(WASTE_LOG_PATH))) {
            String line;
            boolean hasWaste = false;

            while ((line = reader.readLine()) != null) {
                String[] details = line.split(",");
                if (details.length == 4) {
                    System.out.printf("| %-20s | %-20s | %-10s | %-15s |\n", details[0], details[1], details[2], details[3]);
                    hasWaste = true;
                }
            }

            if (!hasWaste) {
                System.out.println("|                        ------ No Waste Yet ------                        |");
            }

        } catch (IOException e) {
            System.out.println("Error reading waste log: " + e.getMessage());
        }

        System.out.println("----------------------------------------------------------------------------");
    }

    public void filterIngredientsByCategory(Scanner scanner) {
        List<String> categories = categoryManager.readCategoriesFromCSV();
    
        if (categories.isEmpty()) {
            System.out.println("No categories available.");
            return;
        }
    
        System.out.println("\nAvailable Categories:");
        for (int i = 0; i < categories.size(); i++) {
            System.out.println((i + 1) + ". " + categories.get(i));
        }
    
        System.out.print("Select a category to filter by: ");
        String input = scanner.nextLine();
    
        int categoryIndex;
        try {
            categoryIndex = Integer.parseInt(input) - 1;
            if (categoryIndex < 0 || categoryIndex >= categories.size()) {
                System.out.println("Invalid category selection.");
                return;
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter a number.");
            return;
        }
    
        String selectedCategory = categories.get(categoryIndex);
        List<String> allIngredients = getAllIngredients();
    
        System.out.println();
        System.out.println("                         Ingredients in Category: " + selectedCategory);
        System.out.println("------------------------------------------------------------------------------");
        System.out.printf("| %-20s | %-20s | %-10s | %-15s |\n", "Ingredient", "Category", "Quantity", "Expiration Date");
        System.out.println("------------------------------------------------------------------------------");
    
        boolean found = false;
        for (String ingredient : allIngredients) {
            String[] details = ingredient.split(",");
            if (details.length == 4 && details[1].equalsIgnoreCase(selectedCategory)) {
                System.out.printf("| %-20s | %-20s | %-10s | %-15s |\n", details[0], details[1], details[2], details[3]);
                found = true;
            }
        }
    
        if (!found) {
            System.out.println("|           No ingredients found in this category.                           |");
        }
    
        System.out.println("------------------------------------------------------------------------------");
    }



    public void updateIngredientQuantity(Scanner scanner) {
        List<String> lines = new ArrayList<>();
    
        // Read all ingredients first
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading ingredients file: " + e.getMessage());
            return;
        }
    
        if (lines.isEmpty()) {
            System.out.println();
            System.out.println("No ingredients found.");
            System.out.println();
            return;
        }
    
        // Show ingredient list
        System.out.println("\nAvailable Ingredients:");
        for (int i = 0; i < lines.size(); i++) {
            String[] details = lines.get(i).split(",");
            if (details.length >= 3) {
                System.out.printf("%d. %s (Quantity: %s ml/gram)\n", i + 1, details[0], details[2]);
            }
        }
    
        System.out.print("\nSelect an ingredient number to update: ");
        int selectedIndex;
        try {
            selectedIndex = Integer.parseInt(scanner.nextLine()) - 1;
            if (selectedIndex < 0 || selectedIndex >= lines.size()) {
                System.out.println();
                System.out.println("Invalid selection.");
                System.out.println();
                return;
            }
        } catch (NumberFormatException e) {
            System.out.println();
            System.out.println("Invalid input. Must be a number.");
            System.out.println();
            return;
        }
    
        // Get the selected line
        String[] selectedDetails = lines.get(selectedIndex).split(",");
    
        System.out.printf("Current quantity of '%s' is %s ml/gram\n", selectedDetails[0], selectedDetails[2]);
        System.out.print("Enter new quantity ml/gram (0 to delete): ");
    
        int newQuantity;
        try {
            newQuantity = Integer.parseInt(scanner.nextLine());
            if (newQuantity < 0) {
                System.out.println();
                System.out.println("Quantity must be a positive number.");
                System.out.println();
                return;
            }
        } catch (NumberFormatException e) {
            System.out.println();
            System.out.println("Invalid quantity.");
            System.out.println();
            return;
        }
    
        if (newQuantity == 0) {
            lines.remove(selectedIndex);
            System.out.println();
            System.out.println("Ingredient deleted successfully.");
            System.out.println();
        } else {
            selectedDetails[2] = String.valueOf(newQuantity);
            lines.set(selectedIndex, String.join(",", selectedDetails));
            System.out.println();
            System.out.println("Quantity updated successfully.");
            System.out.println();
        }
    
        try (FileWriter writer = new FileWriter(FILE_PATH, false)) {
            for (String updatedLine : lines) {
                writer.write(updatedLine + "\n");
            }
        } catch (IOException e) {
            System.out.println();
            System.out.println("Error writing to file: " + e.getMessage());
            System.out.println();
        }
    }
    


    private List<String> getAllIngredients() {
        List<String> ingredients = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                ingredients.add(line);
            }
        } catch (IOException e) {
            System.out.println("Error reading ingredients: " + e.getMessage());
        }
        return ingredients;
    }

    private void saveIngredientToFile(String ingredientData) {
        try (FileWriter writer = new FileWriter(FILE_PATH, true)) {
            writer.write(ingredientData);
            System.out.println();
            System.out.println("Ingredient added successfully!");
            System.out.println();
        } catch (IOException e) {
            System.out.println("Error saving ingredient: " + e.getMessage());
        }
    }

    
}



================================================
FILE: App/src/main/java/org/example/NutritionAPI.java
================================================
package org.example;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import com.fasterxml.jackson.databind.ObjectMapper;


public class NutritionAPI {

    private static final String APP_ID = "1de4f09a";
    private static final String APP_KEY = "7e571b3a590b8ee8d4b42786433ae026";
    private static final String API_URL = "https://api.edamam.com/api/nutrition-details?app_id=" + APP_ID + "&app_key=" + APP_KEY;

    public void showNutritionalSummaryViaAPI() {
        Scanner scanner = new Scanner(System.in);
        List<String> userIngredients = new ArrayList<>();

        System.out.println("Enter ingredients one by one (type 'done' to finish):");

        while (true) {
            System.out.print("Ingredient: ");
            String input = scanner.nextLine();

            if (input.equalsIgnoreCase("done")) {
                break;
            }

            if (!input.trim().isEmpty()) {
                userIngredients.add(input.trim());
            } else {
                System.out.println("Empty input skipped.");
            }
        }

        if (!userIngredients.isEmpty()) {
            try {
                String jsonResponse = sendPostRequest(userIngredients);
                fetchNutritionSummary(jsonResponse);
            } catch (IOException | InterruptedException e) {
                System.out.println("❌ Error fetching nutrition: " + e.getMessage());
            }
        } else {
            System.out.println("❌ No valid ingredients entered.");
        }
    }

    private String sendPostRequest(List<String> ingredients) throws IOException, InterruptedException {
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("title", "User Ingredients");
        requestBody.put("ingr", ingredients);

        ObjectMapper mapper = new ObjectMapper();
        String requestBodyJson = mapper.writeValueAsString(requestBody);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_URL))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBodyJson))
                .build();

        HttpClient client = HttpClient.newHttpClient();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private void fetchNutritionSummary(String jsonResponse) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            Map<String, Object> map = mapper.readValue(jsonResponse, Map.class);

            List<Map<String, Object>> ingredientsList = (List<Map<String, Object>>) map.get("ingredients");

            if (ingredientsList != null && !ingredientsList.isEmpty()) {
                System.out.println("\n====== API Nutrition Summary ======");
                System.out.printf("%-20s %-15s %-10s%n", "Nutrient", "Quantity", "Unit");
                System.out.println("-----------------------------------------------------");

                for (Map<String, Object> ingredient : ingredientsList) {
                    List<Map<String, Object>> parsedList = (List<Map<String, Object>>) ingredient.get("parsed");

                    if (parsedList != null && !parsedList.isEmpty()) {
                        Map<String, Object> parsed = parsedList.get(0);
                        Map<String, Map<String, Object>> nutrients = (Map<String, Map<String, Object>>) parsed.get("nutrients");

                        if (nutrients != null) {
                            printNutrient(nutrients, "ENERC_KCAL", "Calories");
                            printNutrient(nutrients, "FAT", "Fat");
                            printNutrient(nutrients, "CHOCDF", "Carbs");
                            printNutrient(nutrients, "FIBTG", "Fiber");
                            printNutrient(nutrients, "SUGAR", "Sugars");
                            printNutrient(nutrients, "PROCNT", "Protein");
                            printNutrient(nutrients, "CHOLE", "Cholesterol");
                            printNutrient(nutrients, "NA", "Sodium");
                            System.out.println("-----------------------------------------------------");
                        } else {
                            System.out.println("❌ No nutrients data found for one of the ingredients.");
                        }
                    }
                }
            } else {
                System.out.println("❌ No ingredients found in API response.");
            }

        } catch (Exception e) {
            System.out.println("❌ Failed to parse nutritional data: " + e.getMessage());
        }
    }

    private void printNutrient(Map<String, Map<String, Object>> nutrients, String key, String label) {
        if (nutrients.containsKey(key)) {
            Map<String, Object> nutrient = nutrients.get(key);
            double quantity = ((Number) nutrient.get("quantity")).doubleValue();
            String unit = (String) nutrient.get("unit");
            System.out.printf("%-20s %-15.2f %-10s%n", label, quantity, unit);
        }
    }
}



================================================
FILE: App/src/main/java/org/example/RecipeAPIClient.java
================================================
package org.example;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class RecipeAPIClient {

    private static final String API_KEY = "c34f4d9421b5424283f48d1fdf94c423"; 
    private static final String BASE_URL = "https://api.spoonacular.com/recipes/findByIngredients";

    public void suggestRecipes(List<String> ingredients) {
        OkHttpClient client = new OkHttpClient();
    
        String joinedIngredients = String.join(",", ingredients);
        HttpUrl url = HttpUrl.parse(BASE_URL).newBuilder()
                .addQueryParameter("ingredients", joinedIngredients)
                .addQueryParameter("number", "5")
                .addQueryParameter("apiKey", API_KEY)
                .build();
    
        Request request = new Request.Builder().url(url).build();
    
        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                System.out.println("API request failed: " + response.code());
                return;
            }
    
            String responseData = response.body().string();
            JsonArray jsonArray = JsonParser.parseString(responseData).getAsJsonArray();
    
            if (jsonArray.size() == 0) {
                System.out.println("No recipes found for your ingredients.");
                return;
            }
    
            System.out.println("\nSuggested Recipes:");
            for (JsonElement element : jsonArray) {
    
                String title = element.getAsJsonObject().get("title").getAsString();
                JsonArray usedIngredients = element.getAsJsonObject().getAsJsonArray("usedIngredients");
                JsonArray missedIngredients = element.getAsJsonObject().getAsJsonArray("missedIngredients");
    
                // Define width of the box
                int boxWidth = 62;
    
                // Create the box style with fixed width
                String border = "+--------------------------------------------------------------+";
                String recipeTitle = "| Recipe: " + String.format("%-53s", title) + "|";
                String usedHeader = "| Used Ingredients:                                            |";
                String missedHeader = "| Missed Ingredients:                                          |";
    
                // Print the box
                System.out.println(border);
                System.out.println(recipeTitle);
                System.out.println(border);
                System.out.println(usedHeader);
    
                for (JsonElement usedElement : usedIngredients) {
                    String ingredient = usedElement.getAsJsonObject().get("name").getAsString();
                    // Format the ingredient to fit within the box
                    System.out.println("|   - " + String.format("%-55s", ingredient) + "  |");
                }
    
                System.out.println(missedHeader);
                for (JsonElement missedElement : missedIngredients) {
                    String ingredient = missedElement.getAsJsonObject().get("name").getAsString();
                    // Format the ingredient to fit within the box
                    System.out.println("|   - " + String.format("%-55s", ingredient) + "  |");
                }
    
                System.out.println(border);
                System.out.println();
            }
    
        } catch (IOException e) {
            System.out.println("Error fetching recipes: " + e.getMessage());
        }
    }

    


    public List<String> getIngredientsFromCSV(String filePath) {
        List<String> ingredients = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 0 && !parts[0].isBlank()) {
                    ingredients.add(parts[0].trim());
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading ingredient file: " + e.getMessage());
        }
        return ingredients;
    }
}



================================================
FILE: App/src/main/java/org/example/SeasonalTips.java
================================================
package org.example;

import java.time.LocalDate;
import java.time.Month;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

public class SeasonalTips {

    private final Map<String, List<String>> seasonalTips = new HashMap<>();
    private final Random random = new Random();

    public SeasonalTips() {
        seasonalTips.put("Winter", List.of(
            "Consume more citrus fruits to boost immunity.",
            "Stay warm and drink herbal teas.",
            "Include nuts and seeds for energy.",
            "Take vitamin D supplements if sunlight is limited.",
            "Avoid cold drinks and prioritize warm soups."
        ));

        seasonalTips.put("Summer", List.of(
            "Stay hydrated by drinking lots of water.",
            "Eat fruits like cucumbers and melons.",
            "Avoid heavy meals during the day.",
            "Use sunscreen when going outside.",
            "Consume electrolytes to replenish minerals."
        ));

        seasonalTips.put("Spring", List.of(
            "Detox your body with leafy greens.",
            "Include berries for antioxidants.",
            "Get more sunlight and vitamin D.",
            "Add fresh herbs like mint and basil to meals.",
            "Start a light workout to boost your mood."
        ));

        seasonalTips.put("Autumn", List.of(
            "Boost immunity with soups and stews.",
            "Eat seasonal fruits like apples and pears.",
            "Get enough sleep to prepare for colder months.",
            "Stay active with light indoor exercises.",
            "Incorporate root vegetables into your meals."
        ));
    }


    public void displaySeasonalTips() {
        final String YELLOW = "\u001B[33m";
        final String RESET = "\u001B[0m";

        String season = getCurrentSeason();
        List<String> tips = seasonalTips.get(season);

        if (tips != null && !tips.isEmpty()) {
            String randomTip = tips.get(random.nextInt(tips.size()));
            System.out.println("\n📅 Season: " + season);
            System.out.println("💡 Health Tip for " + season + ":");
            System.out.println("→ " + YELLOW + randomTip + RESET + "\n");
        } else {
            System.out.println("⚠️ No tips available for the current season.");
        }
    }


    private String getCurrentSeason() {
        Month currentMonth = LocalDate.now().getMonth();

        // Month currentMonth = Month.DECEMBER;
        
        return switch (currentMonth) {
            case DECEMBER, JANUARY, FEBRUARY -> "Winter";
            case MARCH, APRIL, MAY -> "Spring";
            case JUNE, JULY, AUGUST -> "Summer";
            case SEPTEMBER, OCTOBER, NOVEMBER -> "Autumn";
        };
    }
}



================================================
FILE: App/src/main/java/org/example/Welcome.java
================================================
package org.example;

public class Welcome {
    public void printWelcome(){
        String bold = "\033[1m";  
        String reset = "\033[0m"; 

        System.out.println();
        System.out.println("==============================================================");
        System.out.println("||                                                          ||");
        System.out.println("||" + bold + "                   FRIDGE TRACKER APP!                   " + reset + " ||");
        System.out.println("||                                                          ||");
        System.out.println("==============================================================");
        System.out.println();
    }
}



================================================
FILE: App/.idea/encodings.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
  </component>
</project>


================================================
FILE: App/.idea/misc.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>


================================================
FILE: App/.idea/.gitignore
================================================
# Default ignored files
/shelf/
/workspace.xml


